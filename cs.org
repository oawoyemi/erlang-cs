* debugging
** connect to running node
# use -name for fully qualified hostname
# the modes must match for the running node and remsh i.e. sname->sname or name->name
erl -sname debug -remsh <node>@<host> -setcookie some_cookie
** module info & debug tracing
#+BEGIN_SRC erlang
  Module:module_info() %% returns a dic tionary containing information about
  %% the code in module Module.
  %% dbg:tpl - This function works as tp/2, but enables tracing for local calls (and local functions)
  %% as well as for global calls (and functions).

  dbg:start().   % start dbg
  dbg:tracer().  % start a simple tracer process
  dbg:p(all, c).   % trace calls (c) of that MFA for all processes.
  dbg:tp(Module, Function, Arity, []).   % specify MFA you are interested in or '_' for all FA
  dbg:tpl(Module, '_', []).
  dbg:tpl(x_api, '_', '_', [{'_', [], [{return_trace}]}]).
  dbg:stop_clear().

  debugger:start(). % start debugger ui
#+END_SRC
** run shell with sync
./rebar3 shell --apps <other_app>,sync
* rebar3
** releases
   rebar3 release
   _build/default/rel/bsc/bin/bsc console

** rebar3 getting started


   >rebar3 new app <appname>
   add hex plugin: {plugins, [rebar3_hex]}.
   >rebar3 update
   >rebar3 shell
   >application:start(<app_name>).
   >application:stop(<app_name>).


   reference:  https://medium.com/erlang-central/building-your-first-erlang-app-using-rebar3-25f40b109aad
** rebar shell # start rebar as if -pa ebin & deps
*** Global options:
 # verbose=1 - show output from the common_test run as it goes
 # suites="foo,bar" - run <test>/foo_SUITE and <test>/bar_SUITE
 # case="mycase" - run individual test case foo_SUITE:mycase
** run tests for specific module
rebar3 eunit --module=my_module

** rebar.config
 https://github.com/rebar/rebar/blob/master/rebar.config.sample

 If you want to avoid this step every time you create a new Erlang app, add the
 entry to a global rebar.config and place it at:

 ~/.config/rebar3/rebar.config
** dynamic configuration
http://erlware.org/otp-21-new-sys_config_src-option-in-relx/
* list registered processes
 rp(registered()).

* By setting RELX_REPLACE_OS_VARS=true

   export RELX_REPLACE_OS_VARS=true

   both vm.args and sys.config files may contain OS environment variables that will be replaced

* additional libs (ERL_LIBS)
  Environment variable ERL_LIBS (if defined) is to contain a colon-separated
  (for Unix-like systems) or semicolon-separated (for Windows) list of
  additional libraries.
